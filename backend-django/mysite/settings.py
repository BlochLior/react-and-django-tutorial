"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import sys
import os
import dj_database_url
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise ImproperlyConfigured("SECRET_KEY is not found in environment variables")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Environment-based configuration
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')

if ENVIRONMENT == 'production':
    # Get allowed hosts from environment variable or use default
    allowed_hosts_env = os.getenv('ALLOWED_HOSTS', 'react-and-django-tutorial.onrender.com')
    ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_env.split(',')] + ['127.0.0.1']
else:
    ALLOWED_HOSTS = [
        '127.0.0.1',
        'localhost',
        '0.0.0.0',  # For Docker if needed
    ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'polls.apps.PollsConfig',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

# Google OAuth settings - environment specific
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

# Allauth settings
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'
# Skip email verification for OAuth
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_LOGIN_ON_GET = True

# Redirect URLs for OAuth - environment aware
FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://localhost:3000')
LOGIN_REDIRECT_URL = f'{FRONTEND_URL}/'
LOGOUT_REDIRECT_URL = f'{FRONTEND_URL}/'
ACCOUNT_LOGOUT_REDIRECT_URL = f'{FRONTEND_URL}/'
SOCIALACCOUNT_LOGIN_ON_GET = True

# Session configuration for OAuth
SESSION_COOKIE_HTTPONLY = False  # Allow JavaScript access for client-side auth checks
SESSION_COOKIE_SECURE = ENVIRONMENT == 'production'  # Secure cookies in production (HTTPS only)
SESSION_COOKIE_SAMESITE = 'None' if ENVIRONMENT == 'production' else 'Lax'  # None for cross-domain in production
SESSION_COOKIE_DOMAIN = None  # Use default domain

# Additional session settings for cross-domain OAuth
SESSION_COOKIE_PATH = '/'
SESSION_SAVE_EVERY_REQUEST = True  # Save session on every request

# CSRF configuration for OAuth
CSRF_COOKIE_SAMESITE = 'None' if ENVIRONMENT == 'production' else 'Lax'  # None for cross-domain in production
CSRF_COOKIE_SECURE = ENVIRONMENT == 'production'  # Secure cookies in production

if ENVIRONMENT == 'production':
    CSRF_TRUSTED_ORIGINS = [
        FRONTEND_URL,  # Vercel frontend
        f'https://{ALLOWED_HOSTS[0]}',  # Render backend
    ]
else:
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:3000',
        'http://127.0.0.1:3000',
        'http://localhost:8000',
        'http://127.0.0.1:8000',
    ]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Environment-based database configuration
# Use MySQL for both dev and prod to maintain consistency

DATABASE_URL = os.getenv('DATABASE_URL')
if not DATABASE_URL:
    if ENVIRONMENT == 'production':
        raise ImproperlyConfigured("DATABASE_URL is required for production environment")
    else:
        # Development fallback to SQLite if no DATABASE_URL provided
        print("WARNING: No DATABASE_URL found. Using SQLite for development.")
        print("For best compatibility, set up local MySQL with DATABASE_URL")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    # Use MySQL for both dev and prod (Railway MySQL)
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
        ),
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Jerusalem'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INTERNAL_IPS = [
    '127.0.0.1',
]

TESTING = "test" in sys.argv or "PYTEST_VERSION" in os.environ

# Database configuration for testing
if TESTING:
    # Use SQLite for testing to avoid MySQL permission issues
    # This is a common Django pattern - SQLite for tests, MySQL for dev/prod
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:',  # Use in-memory database for faster tests
            # SQLite doesn't support all MySQL features, but for model tests it's sufficient
            # Your business logic tests will work the same way
        }
    }
elif not TESTING:
    INSTALLED_APPS = [
        *INSTALLED_APPS,
        'debug_toolbar',
    ]
    MIDDLEWARE = [
        *MIDDLEWARE,
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ]

# CORS configuration based on environment
if ENVIRONMENT == 'production':
    # Get CORS origins from FRONTEND_URL environment variable
    cors_origins = [FRONTEND_URL] if FRONTEND_URL else []
    CORS_ALLOWED_ORIGINS = cors_origins
    CORS_ALLOW_ALL_ORIGINS = False
else:
    # Development - allow all origins for easier testing
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:3001",
    ]

# CORS credentials configuration
CORS_ALLOW_CREDENTIALS = True