# .github/workflows/backend_tests.yml
name: Django Backend CI

on:
  push:
    branches:
      - main
    paths:
      - 'backend-django/**'
      - '.github/workflows/backend_tests.yml'
      - 'backend-django/uv.lock'
      - 'backend-django/pyproject.toml'
  pull_request:
    branches:
      - main
    paths:
      - 'backend-django/**'
      - '.github/workflows/backend_tests.yml'
      - 'backend-django/uv.lock'
      - 'backend-django/pyproject.toml'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - 3306:3306
        options: >- # Health check to wait until MySQL is ready
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv (uv is a modern Python package manager)
        uses: astral-sh/setup-uv@v1
        with:
          version: 'latest'
          enable-cache: true

      - name: Create uv virtual environment
        run: uv venv
        working-directory: backend-django

      - name: Synchronize python dependencies with uv.lock (including linting/security tools)
        run: uv sync --dev
        working-directory: backend-django

      - name: Wait for MySQL to be ready
        run: |
          uv run scripts/wait_for_mysql.py
        working-directory: backend-django
        env:
          DATABASE_URL: mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@127.0.0.1:3306/${{ secrets.MYSQL_DATABASE }} # <-- CHANGE THIS LINE
          DJANGO_SETTINGS_MODULE: mysite.settings
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
      - name: Grant test user privileges
        run: |
          mysql -h 127.0.0.1 -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "GRANT ALL PRIVILEGES ON *.* TO '${{ secrets.MYSQL_USER }}'@'%' WITH GRANT OPTION;"
          mysql -h 127.0.0.1 -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "FLUSH PRIVILEGES;"
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
        working-directory: backend-django

      # --- Start Linting & Security Checks ---
      - name: Run Ruff (Linting & Formatting)
        run: uv run ruff check .
        working-directory: backend-django

      - name: Run Bandit (Security Static Analysis)
        run: uv run bandit -r polls/ mysite/ --exclude .venv/,migrations/ -f json -o bandit_report.json || true
        working-directory: backend-django
        env:
          BANDIT_SKIP_TESTS: 1

      - name: Run Safety (Dependency Vulnerability Check)
        run: uv run safety scan --stage production -o safety_report.json || true
        working-directory: backend-django
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}

      # --- End Linting & Security Checks ---

      - name: Run Django Migrations
        run: uv run manage.py migrate
        env:
          DJANGO_SETTINGS_MODULE: mysite.settings
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE_URL: mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@127.0.0.1:3306/${{ secrets.MYSQL_DATABASE }} # <-- CHANGE THIS LINE
        working-directory: backend-django

      - name: Run Django Tests with Coverage
        run: uv run coverage run manage.py test
        env:
          DJANGO_SETTINGS_MODULE: mysite.settings
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE_URL: mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@127.0.0.1:3306/${{ secrets.MYSQL_DATABASE }} # <-- CHANGE THIS LINE
        working-directory: backend-django

      - name: Generate Coverage Report
        run: |
          uv run coverage report -m
          uv run coverage html
          uv run coverage xml
        working-directory: backend-django

      - name: Upload Coverage Report (Optional, for human review)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: backend-django/htmlcov